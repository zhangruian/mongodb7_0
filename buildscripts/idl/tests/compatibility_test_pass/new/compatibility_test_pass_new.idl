# Copyright (C) 2021-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"

imports:
    - "mongo/idl/basic_types.idl"
    - "../buildscripts/idl/tests/compatibility_test_pass/new/imports.idl"

types:
    intStringToInt:
        bson_serialization_type: int
        description: "The bson_serialization_type changes from [int, string] in the old command's
                      reply field type to int in the new command's reply field type"
        cpp_type: "std::int32_t"

    intStringBoolToIntString:
        bson_serialization_type:
                                - int
                                - string
        description: "The bson_serialization_type changes from [int, string, bool] in the old
                      command's reply field type to [int, string] in the new command's reply
                      field type"
        cpp_type: "std::int32_t"

enums:
    NewReplyFieldEnumSubset:
        description: "The new reply type is an enum that is a subset of the old reply type's 
                      enum values"
        type: string
        values:
            valueOne: "one"
            valueTwo: "two"

structs:
    StableNewFieldReply:
        description: "This reply contains a field that is unstable in the old command but is
                      stable in the new command."
        fields:
            stableNewField:
                type: string

    RequiredNewFieldReply:
        description: "This reply contains a field that is optional in the old command but is
                      unstable in the new command."
        fields:
            requiredNewField:
                type: string
    
    AddedNewFieldReply:
        description: "This reply contains a field that is added in the new command."
        fields:
            addedNewField:
                type: string
    
    UnstableOldFieldReply:
        description: "This reply contains a field that is unstable in the old command and is
                      unstable and optional in the new command."
        fields:
            unstableOldField:
                type: string
                unstable: true
                optional: true

    EnumSubsetReply:
        description: "This reply contains an enum field where the new enum values is a subset
                      of the old reply type's enum values"
        fields:
            replyField:
                type: NewReplyFieldEnumSubset

    BsonSubsetReply:
        description: "This reply contains a field type where the new bson_serialization_type
                      is a subset of the old bson_serialization_type"
        fields:
            bsonSubsetReplyField:
                type: intStringToInt

    BsonSubsetReplyTwo:
        description: "This reply contains a field type where the new bson_serialization_type
                      is a subset of the old bson_serialization_type"
        fields:
            bsonSubsetReplyFieldTwo:
                type: intStringBoolToIntString

    StructFieldTypeRecursiveReplyOne:
        description: "This reply contains a field whose new type is a struct that is 
                      compatible with the old field type"
        fields:
            structReplyField:
                type: StableNewFieldReply
    
    StructFieldTypeRecursiveReplyTwo:
        description: "This reply contains a field whose new type is a struct that is 
                      compatible with the old field type"
        fields:
            structReplyField:
                type: StructType

    StructType:
        description: "This struct contains a field whose new type is compatible with the 
                      old field type"
        fields:
            fieldOne:
                type: BsonSubsetReply

commands:
    testCommand:
        description: "new passing test command, there was no change from the old version"
        command_name: testCommand
        namespace: ignored
        cpp_name: testCommand
        strict: true
        api_version: "1"
        reply_type: OkReply

    addedCommand:
        description: "new command is added and should pass"
        command_name: addedCommand
        namespace: ignored
        cpp_name: addedCommand
        strict: true
        api_version: "1"
        reply_type: OkReply

    newReplyFieldStable:
        description: "new command contains a stable reply field that is unstable
                      in the corresponding old command and still passes"
        command_name: newReplyFieldStable
        namespace: ignored
        cpp_name: newReplyFieldStable
        strict: true
        api_version: "1"
        reply_type: StableNewFieldReply
    
    newReplyFieldRequired:
        description: "new command contains a required reply field that is optional
                      in the corresponding old command and still passes"
        command_name: newReplyFieldRequired
        namespace: ignored
        cpp_name: newReplyFieldRequired
        strict: true
        api_version: "1"
        reply_type: RequiredNewFieldReply

    newReplyFieldAdded:
        description: "new command adds a new reply field and still passes"
        command_name: newReplyFieldAdded
        namespace: ignored
        cpp_name: newReplyFieldAdded
        strict: true
        api_version: "1"
        reply_type: AddedNewFieldReply

    oldReplyFieldUnstable:
        description: "old reply field is unstable so new commmand passes even if its new reply
                      field is unstable"
        command_name: oldReplyFieldUnstable
        namespace: ignored
        cpp_name: oldReplyFieldUnstable
        strict: true
        api_version: "1"
        reply_type: UnstableOldFieldReply
    
    importedReplyCommand:
        description: "reply is imported and should pass"
        command_name: importedReplyCommand
        namespace: ignored
        cpp_name: importedReplyCommand
        strict: true
        api_version: "1"
        reply_type: ImportedStableNewFieldReply

    newReplyFieldTypeEnumSubset:
        description: "new command passes because its reply field type is an enum that is
                      a subset of the corresponding old reply field type's enum values"
        command_name: newReplyFieldTypeEnumSubset
        namespace: ignored
        cpp_name: newReplyFieldTypeEnumSubset
        strict: true
        api_version: "1"
        reply_type: EnumSubsetReply

    newReplyFieldTypeBsonSubset:
        description: "new command passes because its reply field type has a bson_serialization_type
                      that is a subset of the corresponding old reply field type's
                      bson_serialization_type"
        command_name: newReplyFieldTypeBsonSubset
        namespace: ignored
        cpp_name: newReplyFieldTypeBsonSubset
        strict: true
        api_version: "1"
        reply_type: BsonSubsetReply

    newReplyFieldTypeBsonSubsetTwo:
        description: "new command passes because its reply field type has a bson_serialization_type
                      that is a subset of the corresponding old reply field type's
                      bson_serialization_type"
        command_name: newReplyFieldTypeBsonSubsetTwo
        namespace: ignored
        cpp_name: newReplyFieldTypeBsonSubsetTwo
        strict: true
        api_version: "1"
        reply_type: BsonSubsetReplyTwo
    
    newReplyFieldTypeStructRecursiveOne:
        description: "new command passes because its reply field type is a struct that is
                      compatible with the old reply field type struct"
        command_name: newReplyFieldTypeStructRecursiveOne
        namespace: ignored
        cpp_name: newReplyFieldTypeStructRecursiveOne
        strict: true
        api_version: "1"
        reply_type: StructFieldTypeRecursiveReplyOne

    newReplyFieldTypeStructRecursiveTwo:
        description: "new command passes because its reply field type is a struct that is
                      compatible with the old reply field type struct"
        command_name: newReplyFieldTypeStructRecursiveTwo
        namespace: ignored
        cpp_name: newReplyFieldTypeStructRecursiveTwo
        strict: true
        api_version: "1"
        reply_type: StructFieldTypeRecursiveReplyTwo
