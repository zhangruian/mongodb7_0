test_kind: js_test

selector:
  roots:
  - jstests/change_streams/**/*.js
  exclude_files:
  # TODO SERVER-66840 investigate the failing test case.
  - jstests/change_streams/projection_fakes_internal_event.js
  - jstests/change_streams/only_wake_getmore_for_relevant_changes.js
  exclude_with_any_tags:
  ##
  # The next tags correspond to the special errors thrown by the
  # set_read_and_write_concerns.js override when it refuses to replace the readConcern or
  # writeConcern of a particular command. Above each tag are the message(s) that cause the tag to be
  # warranted.
  ##
  # "Cowardly refusing to override write concern of command: ..."
  - assumes_write_concern_unchanged

executor:
  archive:
    hooks:
      - CheckReplDBHash
      - ValidateCollections
  config:
    shell_options:
      global_vars:
        TestData:
          defaultReadConcernLevel: null
          enableMajorityReadConcern: ''
      # Enable causal consistency for change streams suites using 1 node replica sets. See
      # change_streams.yml for detailed explanation.
      # TODO SERVER-67267 Load 'inject_tenant_prefix.js', add 'multitenancySupport',
      #                   'featureFlagMongoStore' and 'featureFlagRequireTenantID' flags. The
      #                   'inject_tenant_prefix' should also be called for the
      #                   'enable_change_stream.py' file.
      eval: >-
        var testingReplication = true;
        load('jstests/libs/override_methods/set_read_and_write_concerns.js');
        load('jstests/libs/override_methods/enable_causal_consistency_without_read_pref.js');
        load('jstests/libs/override_methods/override_fixtures_changestream_multitenancy.js');
  hooks:
  # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
  # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
  # validating the entire contents of the collection.
  - class: CheckReplDBHash
  - class: ValidateCollections
  - class: CleanEveryN
    n: 20
  - class: EnableChangeStream
  fixture:
    class: ReplicaSetFixture
    replset_name: "ChangeStreamMultitenantReplSet"
    mongod_options:
      bind_ip_all: ''
      serverless: true
      set_parameters:
        enableTestCommands: 1
        featureFlagServerlessChangeStreams: true
        internalChangeStreamUseTenantIdForTesting: true
        failpoint.assertChangeStreamNssCollection:
          "{'mode': 'alwaysOn', 'data': {'collectionName': 'system.change_collection'}}"
    # TODO SERVER-69115 Set number of nodes to 2 after oplog application is working properly.
    num_nodes: 1
