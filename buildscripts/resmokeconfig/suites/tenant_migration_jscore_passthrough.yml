test_kind: js_test

selector:
  roots:
  - jstests/core/**/*.js
  exclude_files:
  - jstests/core/txns/**/*.js
  # These tests depend on hardcoded database name equality.
  - jstests/core/json_schema/misc_validation.js
  - jstests/core/list_databases.js
  - jstests/core/profile1.js
  - jstests/core/profile3.js
  - jstests/core/views/views_stats.js
  # These tests contain assertions on the number of executed operations and this suite retries
  # operations on TenantMigrationAborted errors.
  - jstests/core/operation_latency_histogram.js
  - jstests/core/top.js
  - jstests/core/profile_sampling.js
  # The override cannot deep copy very large or small dates.
  - jstests/core/index_large_and_small_dates.js
  # These tests are not expected to pass with replica-sets.
  - jstests/core/opcounters_write_cmd.js
  - jstests/core/read_after_optime.js
  # This test expects that the connection (i.e. 'threadName') does not change throughout each test
  # case. That is not always true when there is a background tenant migration.
  - jstests/core/failcommand_failpoint.js
  # The set_param1.js test attempts to compare the response from running the {getParameter: "*"}
  # command multiple times, which may observe the change to the failpoint enabled by the migration
  # hook.
  - jstests/core/set_param1.js
  # This test does not support tojson of command objects so the override cannot deep copy the
  # command objects correctly.
  - jstests/core/SERVER-23626.js
  # These tests write with {w: 0} which doesn't wait for the storage transaction writing the
  # document and the oplog entry to commit so the TenantMigrationConflict will not be caught.
  - jstests/core/batch_write_command_w0.js
  - jstests/core/crud_api.js
  # These tests use benchRun which does not use runCommand.
  - jstests/core/bench_test1.js
  - jstests/core/bench_test3.js
  - jstests/core/benchrun_pipeline_updates.js
  # This test uses exhaust which does not use runCommand.
  - jstests/core/exhaust.js
  # These tests use db._authOrThrow which does not use runCommand.
  - jstests/core/auth1.js
  - jstests/core/connection_status.js
  - jstests/core/user_management_helpers.js
  # These tests use legacy read mode which does not use runCommand.
  - jstests/core/comment_field.js
  - jstests/core/invalidated_legacy_cursors.js
  # TODO (SERVER-51753): Handle applyOps running concurrently with a tenant migration.
  - jstests/core/apply_ops1.js
  - jstests/core/apply_ops1.js
  - jstests/core/apply_ops2.js
  - jstests/core/apply_ops_dups.js
  - jstests/core/apply_ops_index_collation.js
  - jstests/core/apply_ops_invalid_index_spec.js
  - jstests/core/apply_ops_missing_field.js
  - jstests/core/apply_ops_system_dot_views.js
  - jstests/core/apply_ops_without_ns.js
  - jstests/core/bypass_doc_validation.js
  - jstests/core/collation.js
  - jstests/core/collmod_without_uuid.js
  - jstests/core/txns/commands_banning_txnnumber_outside_transactions.js
  - jstests/core/txns/commands_not_allowed_in_txn.js
  - jstests/core/txns/prepare_transaction_fails_on_temp_collections.js
  - jstests/core/txns/statement_ids_accepted.js
  - jstests/core/list_collections1.js
  - jstests/core/list_collections_filter.js
  - jstests/core/list_collections_no_views.js
  - jstests/core/views/duplicate_ns.js
  - jstests/core/views/view_with_invalid_dbname.js
  - jstests/core/views/views_creation.js
  - jstests/core/views/invalid_system_views.js
  - jstests/core/views/views_all_commands.js
  - jstests/core/rename_stayTemp.js
  # TODO (SERVER-52727): Synchronize cloneCollectionAsCapped with tenant migrations.
  - jstests/core/capped_convertToCapped1.js
  # TODO (SERVER-52866): Synchronize getLastError with tenant migrations.
  - jstests/core/bulk_legacy_enforce_gle.js
  # These tests run getMore commands which are not supported in the tenant migration *passthrough*.
  exclude_with_any_tags:
  - requires_getmore

executor:
  archive:
    hooks:
      - CheckReplDBHash
      - CheckReplOplogs
      - ValidateCollections
  config:
    shell_options:
      eval: >-
        testingReplication = true;
        load('jstests/libs/override_methods/inject_tenant_prefix.js');
      global_vars:
        TestData: &TestData
          tenantId: "tenantMigrationTenantId"
      readMode: commands
  hooks:
  - class: ContinuousTenantMigration
    shell_options:
      global_vars:
        TestData: *TestData
  # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
  # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
  # validating the entire contents of the collection.
  - class: CheckReplOplogs
  - class: CheckReplDBHash
  - class: ValidateCollections
  - class: CleanEveryN
    n: 20
  fixture:
    class: TenantMigrationFixture
    mongod_options:
      set_parameters:
        enableTestCommands: 1
        failpoint.abortTenantMigrationAfterBlockingStarts:
            mode: alwaysOn
            data:
              blockTimeMS: 250
        # TODO SERVER-48814: Remove the failpoint 'returnResponseOkForRecipientSyncDataCmd'.
        failpoint.returnResponseOkForRecipientSyncDataCmd:
            mode: alwaysOn
        # Set the delay before migration state machine is garbage collected to be short to avoid
        # migration conflicts since the ContinuousTenantMigration hook migrates a single tenant
        # between the replica sets in the fixture.
        tenantMigrationGarbageCollectionDelayMS: 100
        ttlMonitorSleepSecs: 1
    num_replica_sets: 2
    num_nodes_per_replica_set: 3
    use_replica_set_connection_string: true
