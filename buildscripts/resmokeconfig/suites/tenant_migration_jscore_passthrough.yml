test_kind: js_test

selector:
  roots:
  - jstests/core/**/*.js
  exclude_files:
  # These tests are not expected to pass with replica-sets.
  - jstests/core/opcounters_write_cmd.js
  - jstests/core/read_after_optime.js
  # This test expects that the connection (i.e. 'threadName') does not change throughout each test
  # case. That is not always true when there is a background tenant migration.
  - jstests/core/failcommand_failpoint.js

executor:
  archive:
    hooks:
      - CheckReplDBHash
      - CheckReplOplogs
      - ValidateCollections
  config:
    shell_options:
      eval: >-
        testingReplication = true;
      global_vars:
        TestData: &TestData
          dbPrefix: "tenantMigrationDbPrefix_"
      readMode: commands
  hooks:
  - class: ContinuousTenantMigration
    shell_options:
      global_vars:
        TestData: *TestData
  # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
  # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
  # validating the entire contents of the collection.
  - class: CheckReplOplogs
  - class: CheckReplDBHash
  - class: ValidateCollections
  - class: CleanEveryN
    # TODO (SERVER-49204): The ContinuousTenantMigration hook reuses TestData.dbPrefix hook for all
    # migrations. Therefore, it needs to run the donorForgetMigration command after each migration
    # (i.e. test) in order to make the subsequent migration not conflict with the one run by the
    # previous test. Until we have the donorForgetMigration command, we need to specify n: 1 to
    # clear the in-memory and persisted state for each migration.
    n: 1
  fixture:
    class: ReplicaSetFixture
    mongod_options:
      set_parameters:
        enableTestCommands: 1
        failpoint.skipSendingRecipientSyncDataCommand:
          mode: alwaysOn
    num_nodes: 3
    use_replica_set_connection_string: true
