/**
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 */

#include "mongo/platform/basic.h"

#include "mongo/db/matcher/doc_validation_error.h"
#include "mongo/db/matcher/expression_parser.h"
#include "mongo/db/pipeline/expression_context_for_test.h"
#include "mongo/unittest/unittest.h"

namespace mongo {
namespace {
/**
 * Utility function which parses a MatchExpression from 'query' and verifies that the error
 * generated by the parsed MatchExpression and 'document' matches 'expectedError'.
 */
void verifyGeneratedError(BSONObj query, BSONObj document, BSONObj expectedError) {
    boost::intrusive_ptr<ExpressionContextForTest> expCtx(new ExpressionContextForTest());
    expCtx->isParsingCollectionValidator = true;
    StatusWithMatchExpression result = MatchExpressionParser::parse(query, expCtx);
    ASSERT_OK(result.getStatus());
    MatchExpression* expr = result.getValue().get();
    BSONObj generatedError = doc_validation_error::generateError(*expr, document);
    ASSERT_BSONOBJ_EQ(generatedError, expectedError);
}

// Comparison operators.
// $eq
TEST(ComparisonMatchExpression, BasicEq) {
    BSONObj query = BSON("a" << BSON("$eq" << 2));
    BSONObj document = BSON("a" << 1);
    BSONObj expectedError = BSON("operatorName"
                                 << "$eq"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValue" << 1);
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, EqMissingPath) {
    BSONObj query = BSON("a" << BSON("$eq" << 2));
    BSONObj document = BSON("b" << 1);
    BSONObj expectedError = BSON("operatorName"
                                 << "$eq"
                                 << "specifiedAs" << query << "reason"
                                 << "field was missing");
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, EqImplicitArrayTraversal) {
    BSONObj query = BSON("a" << BSON("$eq" << 2));
    BSONObj document = BSON("a" << BSON_ARRAY(3 << 4 << 5));
    BSONObj expectedError = BSON("operatorName"
                                 << "$eq"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValues"
                                 << BSON_ARRAY(3 << 4 << 5 << BSON_ARRAY(3 << 4 << 5)));
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, EqImplicitArrayTraversalNestedDocumentSingleElement) {
    BSONObj query = BSON("a.b" << BSON("$eq" << 2));
    BSONObj document = BSON("a" << BSON_ARRAY(BSON("b" << 3)));
    BSONObj expectedError = BSON("operatorName"
                                 << "$eq"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValue" << 3);
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, EqImplicitArrayTraversalNestedDocument) {
    BSONObj query = BSON("a.b" << BSON("$eq" << 2));
    BSONObj document = BSON("a" << BSON_ARRAY(BSON("b" << 3) << BSON("b" << 4) << BSON("b" << 5)));
    BSONObj expectedError = BSON("operatorName"
                                 << "$eq"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValues" << BSON_ARRAY(3 << 4 << 5));
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, EqImplicitArrayTraversalNestedArrays) {
    BSONObj query = BSON("a.b" << BSON("$eq" << 2));
    BSONObj document =
        BSON("a" << BSON_ARRAY(BSON("b" << BSON_ARRAY(1 << 2)) << BSON("b" << BSON_ARRAY(3 << 4))));
    BSONObj expectedError = BSON("operatorName"
                                 << "$eq"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValues"
                                 << BSON_ARRAY(1 << 2 << BSON_ARRAY(1 << 2) << 3 << 4
                                                 << BSON_ARRAY(3 << 4)));
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, EqNoOperator) {
    BSONObj query = BSON("a" << 2);
    BSONObj document = BSON("a" << 1);
    BSONObj expectedError = BSON("operatorName"
                                 << "$eq"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValue" << 1);
    verifyGeneratedError(query, document, expectedError);
}

// $ne
TEST(ComparisonMatchExpression, BasicNe) {
    BSONObj query = BSON("a" << BSON("$ne" << 2));
    BSONObj document = BSON("a" << 2);
    BSONObj expectedError = BSON("operatorName"
                                 << "$ne"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison succeeded"
                                 << "consideredValue" << 2);
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, NeImplicitArrayTraversal) {
    BSONObj query = BSON("a" << BSON("$ne" << 2));
    BSONObj document = BSON("a" << BSON_ARRAY(1 << 2 << 3));
    BSONObj expectedError = BSON("operatorName"
                                 << "$ne"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison succeeded"
                                 << "consideredValues"
                                 << BSON_ARRAY(1 << 2 << 3 << BSON_ARRAY(1 << 2 << 3)));
    verifyGeneratedError(query, document, expectedError);
}

// $lt
TEST(ComparisonMatchExpression, BasicLt) {
    BSONObj query = BSON("a" << BSON("$lt" << 0));
    BSONObj document = BSON("a" << 1);
    BSONObj expectedError = BSON("operatorName"
                                 << "$lt"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValue" << 1);
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, LtMissingPath) {
    BSONObj query = BSON("a" << BSON("$lt" << 0));
    BSONObj document = BSON("b" << 1);
    BSONObj expectedError = BSON("operatorName"
                                 << "$lt"
                                 << "specifiedAs" << query << "reason"
                                 << "field was missing");
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, LtImplicitArrayTraversal) {
    BSONObj query = BSON("a" << BSON("$lt" << 0));
    BSONObj document = BSON("a" << BSON_ARRAY(3 << 4 << 5));
    BSONObj expectedError = BSON("operatorName"
                                 << "$lt"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValues"
                                 << BSON_ARRAY(3 << 4 << 5 << BSON_ARRAY(3 << 4 << 5)));
    verifyGeneratedError(query, document, expectedError);
}

// $lte
TEST(ComparisonMatchExpression, BasicLte) {
    BSONObj query = BSON("a" << BSON("$lte" << 0));
    BSONObj document = BSON("a" << 1);
    BSONObj expectedError = BSON("operatorName"
                                 << "$lte"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValue" << 1);
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, LteMissingPath) {
    BSONObj query = BSON("a" << BSON("$lte" << 0));
    BSONObj document = BSON("b" << 1);
    BSONObj expectedError = BSON("operatorName"
                                 << "$lte"
                                 << "specifiedAs" << query << "reason"
                                 << "field was missing");
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, LteImplicitArrayTraversal) {
    BSONObj query = BSON("a" << BSON("$lte" << 0));
    BSONObj document = BSON("a" << BSON_ARRAY(3 << 4 << 5));
    BSONObj expectedError = BSON("operatorName"
                                 << "$lte"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValues"
                                 << BSON_ARRAY(3 << 4 << 5 << BSON_ARRAY(3 << 4 << 5)));
    verifyGeneratedError(query, document, expectedError);
}

// $gt
TEST(ComparisonMatchExpression, BasicGt) {
    BSONObj query = BSON("a" << BSON("$gt" << 3));
    BSONObj document = BSON("a" << 0);
    BSONObj expectedError = BSON("operatorName"
                                 << "$gt"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValue" << 0);
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, GtMissingPath) {
    BSONObj query = BSON("a" << BSON("$gt" << 3));
    BSONObj document = BSON("b" << 1);
    BSONObj expectedError = BSON("operatorName"
                                 << "$gt"
                                 << "specifiedAs" << query << "reason"
                                 << "field was missing");
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, GtImplicitArrayTraversal) {
    BSONObj query = BSON("a" << BSON("$gt" << 3));
    BSONObj document = BSON("a" << BSON_ARRAY(0 << 1 << 2));
    BSONObj expectedError = BSON("operatorName"
                                 << "$gt"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValues"
                                 << BSON_ARRAY(0 << 1 << 2 << BSON_ARRAY(0 << 1 << 2)));
    verifyGeneratedError(query, document, expectedError);
}

// $gte
TEST(ComparisonMatchExpression, BasicGte) {
    BSONObj query = BSON("a" << BSON("$gte" << 3));
    BSONObj document = BSON("a" << 0);
    BSONObj expectedError = BSON("operatorName"
                                 << "$gte"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValue" << 0);
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, GteMissingPath) {
    BSONObj query = BSON("a" << BSON("$gte" << 3));
    BSONObj document = BSON("b" << 1);
    BSONObj expectedError = BSON("operatorName"
                                 << "$gte"
                                 << "specifiedAs" << query << "reason"
                                 << "field was missing");
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, GteImplicitArrayTraversal) {
    BSONObj query = BSON("a" << BSON("$gte" << 3));
    BSONObj document = BSON("a" << BSON_ARRAY(0 << 1 << 2));
    BSONObj expectedError = BSON("operatorName"
                                 << "$gte"
                                 << "specifiedAs" << query << "reason"
                                 << "comparison failed"
                                 << "consideredValues"
                                 << BSON_ARRAY(0 << 1 << 2 << BSON_ARRAY(0 << 1 << 2)));
    verifyGeneratedError(query, document, expectedError);
}

// $in
TEST(ComparisonMatchExpression, BasicIn) {
    BSONObj query = BSON("a" << BSON("$in" << BSON_ARRAY(1 << 2 << 3)));
    BSONObj document = BSON("a" << 4);
    BSONObj expectedError = BSON("operatorName"
                                 << "$in"
                                 << "specifiedAs" << query << "reason"
                                 << "no matching value found in array"
                                 << "consideredValue" << 4);
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, InMissingPath) {
    BSONObj query = BSON("a" << BSON("$in" << BSON_ARRAY(1 << 2 << 3)));
    BSONObj document = BSON("b" << 1);
    BSONObj expectedError = BSON("operatorName"
                                 << "$in"
                                 << "specifiedAs" << query << "reason"
                                 << "field was missing");
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, InNestedDocumentsAndArrays) {
    BSONObj query =
        BSON("a.b" << BSON("$in" << BSON_ARRAY(5 << 6 << 7 << BSON_ARRAY(2 << 3 << 4))));
    BSONObj document =
        BSON("a" << BSON_ARRAY(BSON("b" << BSON_ARRAY(1 << 2)) << BSON("b" << BSON_ARRAY(3 << 4))));
    BSONObj expectedError = BSON("operatorName"
                                 << "$in"
                                 << "specifiedAs" << query << "reason"
                                 << "no matching value found in array"
                                 << "consideredValues"
                                 << BSON_ARRAY(1 << 2 << BSON_ARRAY(1 << 2) << 3 << 4
                                                 << BSON_ARRAY(3 << 4)));
    verifyGeneratedError(query, document, expectedError);
}

// $nin
TEST(ComparisonMatchExpression, BasicNin) {
    BSONObj query = BSON("a" << BSON("$nin" << BSON_ARRAY(1 << 2 << 3)));
    BSONObj document = BSON("a" << 3);
    BSONObj expectedError = BSON("operatorName"
                                 << "$nin"
                                 << "specifiedAs" << query << "reason"
                                 << "matching value found in array"
                                 << "consideredValue" << 3);
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, NinNestedDocumentsAndArrays) {
    BSONObj query = BSON("a.b" << BSON("$nin" << BSON_ARRAY(1 << BSON_ARRAY(2 << 3 << 4))));
    BSONObj document =
        BSON("a" << BSON_ARRAY(BSON("b" << BSON_ARRAY(1 << 2)) << BSON("b" << BSON_ARRAY(3 << 4))));
    BSONObj expectedError = BSON("operatorName"
                                 << "$nin"
                                 << "specifiedAs" << query << "reason"
                                 << "matching value found in array"
                                 << "consideredValues"
                                 << BSON_ARRAY(1 << 2 << BSON_ARRAY(1 << 2) << 3 << 4
                                                 << BSON_ARRAY(3 << 4)));
    verifyGeneratedError(query, document, expectedError);
}

// Verify that Comparison operators which accept a regex ($in and $nin) work as expected.
TEST(ComparisonMatchExpression, InAcceptsRegex) {
    BSONObj query = BSON("a" << BSON("$in" << BSON_ARRAY("/^v/"
                                                         << "/^b/"
                                                         << "/^c/")));
    BSONObj document = BSON("a"
                            << "Validation");
    BSONObj expectedError = BSON("operatorName"
                                 << "$in"
                                 << "specifiedAs" << query << "reason"
                                 << "no matching value found in array"
                                 << "consideredValue"
                                 << "Validation");
    verifyGeneratedError(query, document, expectedError);
}

TEST(ComparisonMatchExpression, NinAcceptsRegex) {
    BSONObj query = BSON("a" << BSON("$nin" << BSON_ARRAY("/^v/"
                                                          << "/^b/"
                                                          << "/^c/")));
    BSONObj document = BSON("a"
                            << "berry");
    BSONObj expectedError = BSON("operatorName"
                                 << "$nin"
                                 << "specifiedAs" << query << "reason"
                                 << "matching value found in array"
                                 << "consideredValue"
                                 << "berry");
    verifyGeneratedError(query, document, expectedError);
}
}  // namespace
}  // namespace mongo