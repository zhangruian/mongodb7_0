# Copyright (C) 2020-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#
global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/client/read_preference.h"
        - "mongo/db/repl/migrating_tenant_util.h"

imports:
    - "mongo/client/read_preference_setting.idl"
    - "mongo/db/repl/replication_types.idl"
    - "mongo/idl/basic_types.idl"

enums:
    TenantMigrationDonorState:
        description: "The state of an in-progress tenant migration."
        type: string
        values:
            kDataSync: "data sync"
            kBlocking: "blocking"
            kCommitted: "committed"
            kAborted: "aborted"

structs:
    tenantMigrationDonorDocument:
        description: "Represents an in-progress tenant migration on the migration donor."
        strict: true
        fields:
            _id:
                type: objectid
                description: "A unique identifier for the document."
                cpp_name: id
            migrationId:
                type: uuid
                description: "Unique identifier for the tenant migration."
            recipientConnectionString:
                type: string
                description: "The URI string that the donor will utilize to create a connection with the recipient."
            databasePrefix:
                type: string
                description: "The database prefix for the migration."
            state:
                type: TenantMigrationDonorState
                description: "The state of the tenant migration."
            blockTimestamp:
                type: timestamp
                description:
                    "The timestamp at which writes and causal reads against the databases
                    being migrated should start blocking."
                optional: true
            garbageCollect:
                type: bool
                description: "A boolean that determines whether the state machine should be deleted after a delay via the TTL monitor."

    tenantMigrationRecipientDocument:
        description: "Represents an in-progress tenant migration on the migration recipient."
        strict: true
        fields:
            _id:
                type: objectid
                description: "A unique identifier for the document."
                cpp_name: id
            migrationId:
                type: uuid
                description: "Unique identifier for the tenant migration."
            donorConnectionString:
                type: string
                description: "The URI string that the donor will utilize to create a connection with the recipient."
            databasePrefix:
                type: string
                description: "The database prefix for the migration."
                validator:
                    callback: "validateDbPrefix"
            readPreference:
                type: readPreference
                description: "The read preference setting that the recipient will use to determine which node in the donor replica set to clone from."
            garbageCollect:
                type: bool
                description: "A boolean that determines whether the state machine should be deleted after a delay via the TTL monitor."
            startApplyingOpTime:
                description: "Populated during data sync; the donor's operation time when the data cloning starts."
                type: optime
            startFetchingOpTime:
                description: "Populated during data sync; the donor's operation time of the last open transaction when the data cloning started."
                type: optime
            cloneFinishedOptime:
                description: "Populated during data sync; the recipient operation time when the data cloning finishes."
                type: optime
