# Copyright (C) 2020-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#
global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/client/read_preference.h"
        - "mongo/db/repl/tenant_migration_util.h"

imports:
    - "mongo/client/read_preference_setting.idl"
    - "mongo/db/repl/replication_types.idl"
    - "mongo/idl/basic_types.idl"

enums:
    TenantMigrationDonorState:
        description: "The state of an in-progress tenant migration."
        type: string
        values:
            kUninitialized: "uninitialized"
            kDataSync: "data sync"
            kBlocking: "blocking"
            kCommitted: "committed"
            kAborted: "aborted"

    TenantMigrationRecipientState:
        description: "The state of an tenant migration on recipient side."
        type: string
        values:
            kUninitialized: "uninitialized"
            kStarted: "started"
            kConsistent: "consistent"
            kDone: "done"

structs:
    tenantMigrationDonorDocument:
        description: "Represents an in-progress tenant migration on the migration donor."
        strict: true
        fields:
            _id:
                type: uuid
                description: "Unique identifier for the tenant migration."
                cpp_name: id
            recipientConnectionString:
                type: string
                description: >-
                    The URI string that the donor will utilize to create a connection with
                    the recipient.
            readPreference:
                type: readPreference
                description: >-
                    The read preference setting that the recipient will use to determine
                    which node in the donor replica set to clone from.
            tenantId:
                type: string
                description: "The tenantId for the migration."
            state:
                type: TenantMigrationDonorState
                description: "The state of the tenant migration."
                default: kUninitialized
            blockTimestamp:
                type: timestamp
                description: >-
                    The timestamp at which writes and causal reads against the databases
                    being migrated should start blocking.
                optional: true
            commitOrAbortOpTime:
                type: optime
                description:
                    The opTime at which the donor's state document was set to 'committed'
                    or 'aborted'.
                optional: true
            abortReason:
                type: object
                description: "The error that caused the migration to abort."
                optional: true
            expireAt:
                type: date
                description: >-
                    The wall-clock time at which the state machine document should be
                    removed by the TTL monitor.
                optional: true

    tenantMigrationRecipientDocument:
        description: "Represents an in-progress tenant migration on the migration recipient."
        strict: true
        fields:
            _id:
                type: uuid
                description: "Unique identifier for the tenant migration."
                cpp_name: id
            donorConnectionString:
                type: string
                description: >-
                    The URI string that the recipient will utilize to create a connection
                    with the donor.
            tenantId:
                type: string
                description: "The tenantId for the migration."
                validator:
                    callback: "validateDatabasePrefix"
            readPreference:
                type: readPreference
                description: >-
                    The read preference setting that the recipient will use to determine
                    which node in the donor replica set to clone from.
            state:
                type: TenantMigrationRecipientState
                description: "The state of the tenant migration."
                default: kUninitialized
            expireAt:
                type: date
                description: >-
                    The wall-clock time at which the state machine document should be
                    removed by the TTL monitor.
                optional: true
            startApplyingDonorOpTime:
                description: >-
                    Populated during data sync; the donor's operation time when the data
                    cloning starts.
                type: optime
                optional: true
            startFetchingDonorOpTime:
                description: >-
                    Populated during data sync; the donor's operation time of the last open
                    transaction when the data cloning started.
                type: optime
                optional: true
            dataConsistentStopDonorOpTime:
                description: >-
                    Populated during data sync; the donor's operation time when the data
                    cloning finishes.
                type: optime
                optional: true
            cloneFinishedRecipientOpTime:
                description: >-
                    Populated during data sync; the recipient operation time when the data
                    cloning finishes.
                type: optime
                optional: true
