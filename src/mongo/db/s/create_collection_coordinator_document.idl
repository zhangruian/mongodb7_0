# Copyright (C) 2021-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

# This file defines the format of documents stored in config.ddl.dropCollections, used by the
# shard coordinator to guarantee resilience in the event of stepdowns while creating collections.

global:
    cpp_namespace: "mongo"

imports:
    - "mongo/idl/basic_types.idl"
    - "mongo/db/s/sharding_ddl_coordinator.idl"
    - "mongo/s/request_types/sharded_ddl_commands.idl"

enums:
    CreateCollectionCoordinatorPhase:
        description: "Current create collection coordinator's operation state."
        type: string
        values:
            kUnset: "unset"
            kCheck: "check"
            kCommit: "commit"

structs:
    CreateCollectionCoordinatorDocument:
        description: "Object with neccessary fields to create a collection"
        generate_comparison_operators: false
        strict: true
        chained_structs:
            ShardingDDLCoordinatorMetadata: ShardingDDLCoordinatorMetadata
        fields:
            phase:
                type: CreateCollectionCoordinatorPhase
                description: "Coordinator phase."
                default: kUnset
            shardKeyAlreadyCreated:
                type: bool
                description: >- 
                    If set then the collection already had the shard key index created when the 
                    command was first invoked. If a step down happens, then the shard index will 
                    not be dropped on the next attempt at startup.
                default: false
            shardKey:
                type: object_owned
                description: "The index specification document to use as the shard key."
                optional: true
            unique:
                type: bool
                description: "Whether the shard key index should enforce a unique constraint."
                optional: true
            numInitialChunks:
                type: safeInt64
                description: >-
                    The number of chunks to create initially when sharding an empty collection with
                    a hashed shard key.
                optional: true
            presplitHashedZones:
                type: bool
                description: >- 
                    True if the chunks should be pre-split based on the existing zones when 
                    sharding a collection with hashed shard key.
                optional: true
            initialSplitPoints:
                type: array<object_owned>
                description: >- 
                    A specific set of points to create initial splits at, currently used only by
                    mapReduce.
                optional: true
            collation:
                type: object_owned
                description: "The collation to use for the shard key index."
                optional: true