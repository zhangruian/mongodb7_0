# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

# ShardCollectionType type
#
# This type represents the layout and contents of documents contained in the shard server's
# config.cache.collections collection. All manipulation of documents coming from that collection
# should be done with this class.
#
# Expected shard server config.cache.collections collection format:
#   {
#      "_id" : "foo.bar",
#      "uuid" : UUID,                                   // optional in 3.6
#      "epoch" : ObjectId("58b6fd76132358839e409e47"),  // will remove when UUID becomes available
#      "key" : {
#          "_id" : 1
#      },
#      "defaultCollation" : {
#          "locale" : "fr_CA"
#      },
#      "unique" : false,
#      "refreshing" : true,                                 // optional
#      "lastRefreshedCollectionVersion" : Timestamp(1, 0),  // optional
#      "enterCriticalSectionCounter" : 4                    // optional
#      "reshardingFields": {                                // optional
#          "uuid" : UUID,
#          "state" : CoordinatorState<kInitialized>,
#          // Only populated if the coordinator has encountered an error.
#          "abortReason": BSONObj   
#          // Only populated if this collection is the original sharded collection.
#          "donorFields" : {
#              "reshardingKey" : {
#                  "_notTheID" : 1
#              }
#          },
#          // Only populated if:
#          // a) This collection is the temporary resharding collection, or
#          // b) This is the original collection and the coordinator has
#          //    chosen to commit
#          "recipientFields" : {
#              "fetchTimestamp" : Timestamp(3, 4),
#              "originalNamespace" : "foo.bar",
#          }
#       },
#       "supportingLongName" : "implicitly_enabled"  // optional
#   }
#

global:
    cpp_namespace: "mongo"

imports:
    - "mongo/idl/basic_types.idl"
    - "mongo/db/keypattern.idl"
    - "mongo/s/chunk_version.idl"
    - "mongo/s/resharding/type_collection_fields.idl"
    - "mongo/s/type_collection_common_types.idl"

structs:
    ShardCollectionTypeBase:
        description: "Represents the layout and contents of documents contained in the shard 
                      server's config.cache.collections collection."
        strict: false
        fields:
            _id:
                cpp_name: nss
                type: namespacestring
                description: "The full namespace (with the database prefix)."
                optional: false
            epoch:
                type: objectid
                description: "Uniquely identifies this instance of the collection, in case of
                              drop/create or shard key refine."
                optional: false
            timestamp:
                type: timestamp
                description: "Uniquely identifies this incarnation of the collection. Only changes
                              in case of drop and create, or shard key refine.
                              This field will store the ClusterTime of the Config Server when the
                              collection was created or it's shard key last refined. Because
                              timestamps are comparable, we are able to define a total order in time
                              in the collection. This field will replace Epoch, which are not
                              comparable."
            uuid:
                type: uuid
                description: "The UUID that will be used to create the local collection on each of
                              the shards which have chunks."
                optional: false
            key:
                cpp_name: keyPattern
                type: KeyPattern
                description: "Sharding key. If collection is dropped, this is no longer required."
                optional: false
            defaultCollation:
                type: object_owned
                description: "Optional collection default collation. If missing or set to the empty
                              BSON, implies simple collation."
                default: BSONObj()
            unique:
                type: bool
                description: "Uniqueness of the sharding key."
                optional: false
            refreshing:
                type: bool
                description: "Set by primaries and used by shard secondaries to safely refresh chunk
                              metadata. Indicates whether the chunks collection is current being
                              updated, which means read results won't provide a complete view of the
                              chunk metadata."
                optional: true
            lastRefreshedCollectionVersion:
                type: ChunkVersionLegacy
                description: "Set by primaries and used by shard secondaries to safely refresh chunk
                              metadata. Indicates the collection version of the last complete chunk
                              metadata refresh, and is used to indicate if a refresh occurred if the
                              value is different than when the caller last checked -- because
                              'refreshing' will be false both before and after a refresh occurs."
                optional: true
            enterCriticalSectionCounter:
                type: int
                description: "Currently just an OpObserver signal, thus otherwise ignored."
                optional: true
            reshardingFields:
                description: "Resharding-related fields. Only set when this collection is either the
                              original collection undergoing a resharding operation or this
                              collection is the temporary resharding collection."
                type: TypeCollectionReshardingFields
                optional: true
            maxChunkSizeBytes: 
                type: safeInt64
                description: "Max chunk size in bytes."
                optional: true
            allowAutoSplit: 
                type: bool
                description: "Specifies whether the auto-splitter should be running or not for this collection."
                default: true
            allowMigrations:
                cpp_name: pre50CompatibleAllowMigrations
                type: bool
                description: "Whether this collection allows chunks to move. It is required by
                              almost all DDL operations in order to guarantee that the set of
                              shards, which comprise a collection will not change.

                              If the flag is not present it defaults to true.

                              It must be optional and not present when running in FCV 4.4, because
                              binaries prior to 5.0 use strict parsing and will fail."
                optional: true
            timeseriesFields:
                type: TypeCollectionTimeseriesFields
                description: "Time-series collection fields. Only set when this is a time-series
                              buckets collection."
                optional: true
            supportingLongName:
                type: SupportingLongNameStatus
                description: "When set, the maximum name length of sharded collections is aligned
                              with that of non-sharded collections, which is 255 bytes from MongoDB
                              version 4.4 and 120 bytes with earlier versions. Otherwise, the limit
                              for shared collections is reduced by 20 bytes, regardless of the
                              version of MongoDB.

                              With version 5.1, the support for long names is implicitly enabled on
                              all collections by upgrading the feature compatibility version (FCV).
                              With FCV lower than 5.1 but using binaries supporting the feature,
                              the support for long names is disabled by default and requires an
                              explicit enabling on the specific collection. Otherwise, the feature
                              cannot be enabled in any way as unsupported by the binaries.

                              From a technical perspective, enabling the feature, the
                              system.cache.chunks.<NS> collections are created or renamed using the
                              sharded collection UUID, instead of the namespace, as part of their
                              names, i.e., system.cache.chunks.<UUID>."
                optional: true
