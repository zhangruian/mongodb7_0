==== VARIATION: optimized $match with $or: pipeline is able to use a SargableNode with a disjunction of point intervals. ====
-- INPUTS:
pipeline: [{$match: {$or: [{a: 1}, {a: 2}, {a: 3}]}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
				index1: 
					collation spec: 
						ABT path: 
							PathGet [a]
							PathTraverse [1]
							PathIdentity []

						collation op: Ascending
					version: 2
					ordering bits: 0
					is multi-key: 1
					distribution and paths: 
						distribution type: Centralized
						distribution paths: 
					requirementsMap: 

			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	MemoSubstitutionPhase

-- OUTPUT:
Root []
|   |   projections: 
|   |       scan_0
|   RefBlock: 
|       Variable [scan_0]
Sargable [Complete]
|   |   |   |   |   requirementsMap: 
|   |   |   |   |       refProjection: scan_0, path: 'PathGet [a] PathTraverse [1] PathIdentity []', intervals: {{{[Const [3], Const [3]]}} U {{[Const [1], Const [1]]}} U {{[Const [2], Const [2]]}}}
|   |   |   |   candidateIndexes: 
|   |   |   |       candidateId: 1, index1, {}, {0}, {{{[Const [3], Const [3]]}} U {{[Const [1], Const [1]]}} U {{[Const [2], Const [2]]}}}
|   |   |   scanParams: 
|   |   |       {'a': evalTemp_0}
|   |   |           residualReqs: 
|   |   |               refProjection: evalTemp_0, path: 'PathTraverse [1] PathIdentity []', intervals: {{{[Const [3], Const [3]]}} U {{[Const [1], Const [1]]}} U {{[Const [2], Const [2]]}}}, entryIndex: 0
|   |   BindBlock:
|   RefBlock: 
|       Variable [scan_0]
Scan [collection]
    BindBlock:
        [scan_0]
            Source []


==== VARIATION: optimized $match with $in and a list of equalities becomes a comparison to an EqMember list. ====
-- INPUTS:
pipeline: [{$match: {a: {$in: [1, 2, 3]}}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
				index1: 
					collation spec: 
						ABT path: 
							PathGet [a]
							PathTraverse [1]
							PathIdentity []

						collation op: Ascending
					version: 2
					ordering bits: 0
					is multi-key: 1
					distribution and paths: 
						distribution type: Centralized
						distribution paths: 
					requirementsMap: 

			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	MemoSubstitutionPhase

-- OUTPUT:
Root []
|   |   projections: 
|   |       scan_0
|   RefBlock: 
|       Variable [scan_0]
Filter []
|   EvalFilter []
|   |   Variable [scan_0]
|   PathGet [a]
|   PathTraverse [1]
|   PathCompare [EqMember]
|   Const [[1, 2, 3]]
Scan [collection]
    BindBlock:
        [scan_0]
            Source []


==== VARIATION: optimized $project inclusion then $match: observe the Filter can be reordered against the Eval node ====
-- INPUTS:
pipeline: [{$project: {a: 1, b: 1}}, {$match: {a: 2}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	ConstEvalPre
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase
	PathFuse

-- OUTPUT:
Root []
|   |   projections: 
|   |       combinedProjection_0
|   RefBlock: 
|       Variable [combinedProjection_0]
Evaluation []
|   BindBlock:
|       [combinedProjection_0]
|           EvalPath []
|           |   Const [{}]
|           PathComposeM []
|           |   PathField [b]
|           |   PathConstant []
|           |   Variable [fieldProj_2]
|           PathComposeM []
|           |   PathField [a]
|           |   PathConstant []
|           |   Variable [fieldProj_1]
|           PathField [_id]
|           PathConstant []
|           Variable [fieldProj_0]
Filter []
|   EvalFilter []
|   |   Variable [fieldProj_1]
|   PathTraverse [1]
|   PathCompare [Eq]
|   Const [2]
PhysicalScan [{'_id': fieldProj_0, 'a': fieldProj_1, 'b': fieldProj_2}, collection]
    BindBlock:
        [fieldProj_0]
            Source []
        [fieldProj_1]
            Source []
        [fieldProj_2]
            Source []


==== VARIATION: optimized $match basic ====
-- INPUTS:
pipeline: [{$match: {a: 1, b: 2}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase

-- OUTPUT:
Root []
|   |   projections: 
|   |       scan_0
|   RefBlock: 
|       Variable [scan_0]
Filter []
|   EvalFilter []
|   |   Variable [evalTemp_3]
|   PathTraverse [1]
|   PathCompare [Eq]
|   Const [2]
Filter []
|   EvalFilter []
|   |   Variable [evalTemp_2]
|   PathTraverse [1]
|   PathCompare [Eq]
|   Const [1]
PhysicalScan [{'<root>': scan_0, 'a': evalTemp_2, 'b': evalTemp_3}, collection]
    BindBlock:
        [evalTemp_2]
            Source []
        [evalTemp_3]
            Source []
        [scan_0]
            Source []


==== VARIATION: optimized $expr filter: make sure we have a single array constant for (1, 2, 'str', ...) ====
-- INPUTS:
pipeline: [{$project: {a: {$filter: {input: [1, 2, 'str', {a: 2.0, b:'s'}, 3, 4], as: 'num', cond: {$and: [{$gte: ['$$num', 2]}, {$lte: ['$$num', 3]}]}}}}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	ConstEvalPre

-- OUTPUT:
Root []
|   |   projections: 
|   |       combinedProjection_0
|   RefBlock: 
|       Variable [combinedProjection_0]
Evaluation []
|   BindBlock:
|       [combinedProjection_0]
|           EvalPath []
|           |   Variable [scan_0]
|           PathComposeM []
|           |   PathDefault []
|           |   Const [{}]
|           PathComposeM []
|           |   PathField [a]
|           |   PathConstant []
|           |   EvalPath []
|           |   |   Const [[1, 2, "str", {"a" : 2, "b" : "s"}, 3, 4]]
|           |   PathTraverse [inf]
|           |   PathLambda []
|           |   LambdaAbstraction [projGetPath_0_var_1]
|           |   If []
|           |   |   |   Const [Nothing]
|           |   |   Variable [projGetPath_0_var_1]
|           |   BinaryOp [And]
|           |   |   BinaryOp [Gte]
|           |   |   |   Const [2]
|           |   |   Variable [projGetPath_0_var_1]
|           |   BinaryOp [Lte]
|           |   |   Const [3]
|           |   Variable [projGetPath_0_var_1]
|           PathKeep [_id, a]
Scan [collection]
    BindBlock:
        [scan_0]
            Source []


==== VARIATION: optimized $group local global ====
-- INPUTS:
pipeline: [{$group: {_id: '$a', c: {$sum: '$b'}}}]
metadata: 
	number of partitions: 5
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: UnknownPartitioning
				distribution paths: 
			indexes: 
			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase

-- OUTPUT:
Root []
|   |   projections: 
|   |       agg_project_0
|   RefBlock: 
|       Variable [agg_project_0]
Exchange []
|   |   distribution: 
|   |       type: Centralized
|   RefBlock: 
Evaluation []
|   BindBlock:
|       [agg_project_0]
|           EvalPath []
|           |   Const [{}]
|           PathComposeM []
|           |   PathField [c]
|           |   PathConstant []
|           |   Variable [c_agg_0]
|           PathField [_id]
|           PathConstant []
|           Variable [groupByProj_0]
GroupBy [Global]
|   |   groupings: 
|   |       RefBlock: 
|   |           Variable [groupByProj_0]
|   aggregations: 
|       [c_agg_0]
|           FunctionCall [$sum]
|           Variable [preagg_0]
Exchange []
|   |   distribution: 
|   |       type: HashPartitioning
|   |           projections: 
|   |               groupByProj_0
|   RefBlock: 
|       Variable [groupByProj_0]
GroupBy [Local]
|   |   groupings: 
|   |       RefBlock: 
|   |           Variable [groupByProj_0]
|   aggregations: 
|       [preagg_0]
|           FunctionCall [$sum]
|           Variable [groupByInputProj_0]
PhysicalScan [{'a': groupByProj_0, 'b': groupByInputProj_0}, collection, parallel]
    BindBlock:
        [groupByInputProj_0]
            Source []
        [groupByProj_0]
            Source []


==== VARIATION: optimized $unwind then $sort ====
-- INPUTS:
pipeline: [{$unwind: '$x'}, {$sort: {'x': 1}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	ConstEvalPost
	ConstEvalPre
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase
	PathFuse
	PathLower

-- OUTPUT:
Root []
|   |   projections: 
|   |       embedProj_0
|   RefBlock: 
|       Variable [embedProj_0]
Collation []
|   |   collation: 
|   |       sort_0: Ascending
|   RefBlock: 
|       Variable [sort_0]
Evaluation []
|   BindBlock:
|       [sort_0]
|           Variable [unwoundProj_0]
Evaluation []
|   BindBlock:
|       [embedProj_0]
|           If []
|           |   |   Variable [scan_0]
|           |   FunctionCall [setField]
|           |   |   |   Variable [unwoundProj_0]
|           |   |   Const ["x"]
|           |   Variable [scan_0]
|           BinaryOp [Or]
|           |   FunctionCall [isObject]
|           |   Variable [scan_0]
|           FunctionCall [exists]
|           Variable [unwoundProj_0]
Unwind []
|   BindBlock:
|       [unwoundPid_0]
|           Source []
|       [unwoundProj_0]
|           Source []
PhysicalScan [{'<root>': scan_0, 'x': unwoundProj_0}, collection]
    BindBlock:
        [scan_0]
            Source []
        [unwoundProj_0]
            Source []


==== VARIATION: optimized $match with index ====
-- INPUTS:
pipeline: [{$match: {'a': 10}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
				index1: 
					collation spec: 
						ABT path: 
							PathGet [a]
							PathTraverse [1]
							PathIdentity []

						collation op: Ascending
					version: 2
					ordering bits: 0
					is multi-key: 1
					distribution and paths: 
						distribution type: Centralized
						distribution paths: 
					requirementsMap: 

			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase

-- OUTPUT:
Root []
|   |   projections: 
|   |       scan_0
|   RefBlock: 
|       Variable [scan_0]
BinaryJoin [joinType: Inner, {rid_0}]
|   |   Const [true]
|   LimitSkip []
|   |   limitSkip:
|   |       limit: 1
|   |       skip: 0
|   Seek [ridProjection: rid_0, {'<root>': scan_0}, collection]
|   |   BindBlock:
|   |       [scan_0]
|   |           Source []
|   RefBlock: 
|       Variable [rid_0]
IndexScan [{'<rid>': rid_0}, scanDefName: collection, indexDefName: index1, interval: {[Const [10], Const [10]]}]
    BindBlock:
        [rid_0]
            Source []


==== VARIATION: optimized $match index covered ====
-- INPUTS:
pipeline: [{$project: {_id: 0, a: 1}}, {$match: {'a': 10}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
				index1: 
					collation spec: 
						ABT path: 
							PathGet [a]
							PathIdentity []

						collation op: Ascending
					version: 2
					ordering bits: 0
					is multi-key: 0
					distribution and paths: 
						distribution type: Centralized
						distribution paths: 
					requirementsMap: 

			non multi-key index paths: 
				PathGet [a]
				PathIdentity []

			collection exists: 1
			CE type: -1
optimization phases: 
	ConstEvalPre
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase
	PathFuse

-- OUTPUT:
Root []
|   |   projections: 
|   |       combinedProjection_0
|   RefBlock: 
|       Variable [combinedProjection_0]
Evaluation []
|   BindBlock:
|       [combinedProjection_0]
|           EvalPath []
|           |   Const [{}]
|           PathField [a]
|           PathConstant []
|           Variable [fieldProj_0]
IndexScan [{'<indexKey> 0': fieldProj_0}, scanDefName: collection, indexDefName: index1, interval: {[Const [10], Const [10]]}]
    BindBlock:
        [fieldProj_0]
            Source []


==== VARIATION: optimized $match index covered, match then project ====
-- INPUTS:
pipeline: [{$match: {'a': 10}}, {$project: {_id: 0, a: 1}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
				index1: 
					collation spec: 
						ABT path: 
							PathGet [a]
							PathIdentity []

						collation op: Ascending
					version: 2
					ordering bits: 0
					is multi-key: 0
					distribution and paths: 
						distribution type: Centralized
						distribution paths: 
					requirementsMap: 

			non multi-key index paths: 
				PathGet [a]
				PathIdentity []

			collection exists: 1
			CE type: -1
optimization phases: 
	ConstEvalPre
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase
	PathFuse

-- OUTPUT:
Root []
|   |   projections: 
|   |       combinedProjection_0
|   RefBlock: 
|       Variable [combinedProjection_0]
Evaluation []
|   BindBlock:
|       [combinedProjection_0]
|           EvalPath []
|           |   Const [{}]
|           PathField [a]
|           PathConstant []
|           Variable [fieldProj_0]
IndexScan [{'<indexKey> 0': fieldProj_0}, scanDefName: collection, indexDefName: index1, interval: {[Const [10], Const [10]]}]
    BindBlock:
        [fieldProj_0]
            Source []


==== VARIATION: optimized $match index covered, match on two indexed keys then project ====
-- INPUTS:
pipeline: [{$match: {'a': 10, 'b': 20}}, {$project: {_id: 0, a: 1}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
				index1: 
					collation spec: 
						ABT path: 
							PathGet [a]
							PathIdentity []

						collation op: Ascending
						ABT path: 
							PathGet [b]
							PathIdentity []

						collation op: Ascending
					version: 2
					ordering bits: 0
					is multi-key: 0
					distribution and paths: 
						distribution type: Centralized
						distribution paths: 
					requirementsMap: 

			non multi-key index paths: 
				PathGet [a]
				PathIdentity []

				PathGet [b]
				PathIdentity []

			collection exists: 1
			CE type: -1
optimization phases: 
	ConstEvalPre
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase
	PathFuse

-- OUTPUT:
Root []
|   |   projections: 
|   |       combinedProjection_0
|   RefBlock: 
|       Variable [combinedProjection_0]
Evaluation []
|   BindBlock:
|       [combinedProjection_0]
|           EvalPath []
|           |   Const [{}]
|           PathField [a]
|           PathConstant []
|           Variable [fieldProj_0]
IndexScan [{'<indexKey> 0': fieldProj_0}, scanDefName: collection, indexDefName: index1, interval: {[Const [10], Const [10]], [Const [20], Const [20]]}]
    BindBlock:
        [fieldProj_0]
            Source []


==== VARIATION: optimized $match index covered, match on three indexed keys then project ====
-- INPUTS:
pipeline: [{$match: {'a': 10, 'b': 20, 'c': 30}}, {$project: {_id: 0, a: 1, b: 1, c: 1}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
				index1: 
					collation spec: 
						ABT path: 
							PathGet [a]
							PathIdentity []

						collation op: Ascending
						ABT path: 
							PathGet [b]
							PathIdentity []

						collation op: Ascending
						ABT path: 
							PathGet [c]
							PathIdentity []

						collation op: Ascending
					version: 2
					ordering bits: 0
					is multi-key: 0
					distribution and paths: 
						distribution type: Centralized
						distribution paths: 
					requirementsMap: 

			non multi-key index paths: 
				PathGet [a]
				PathIdentity []

				PathGet [b]
				PathIdentity []

				PathGet [c]
				PathIdentity []

			collection exists: 1
			CE type: -1
optimization phases: 
	ConstEvalPre
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase
	PathFuse

-- OUTPUT:
Root []
|   |   projections: 
|   |       combinedProjection_0
|   RefBlock: 
|       Variable [combinedProjection_0]
Evaluation []
|   BindBlock:
|       [combinedProjection_0]
|           EvalPath []
|           |   Const [{}]
|           PathComposeM []
|           |   PathField [c]
|           |   PathConstant []
|           |   Variable [fieldProj_2]
|           PathComposeM []
|           |   PathField [b]
|           |   PathConstant []
|           |   Variable [fieldProj_1]
|           PathField [a]
|           PathConstant []
|           Variable [fieldProj_0]
IndexScan [{'<indexKey> 0': fieldProj_0, '<indexKey> 1': fieldProj_1, '<indexKey> 2': fieldProj_2}, scanDefName: collection, indexDefName: index1, interval: {[Const [10], Const [10]], [Const [20], Const [20]], [Const [30], Const [30]]}]
    BindBlock:
        [fieldProj_0]
            Source []
        [fieldProj_1]
            Source []
        [fieldProj_2]
            Source []


==== VARIATION: optimized $match index covered, inclusion project then match on three indexed keys ====
-- INPUTS:
pipeline: [{$project: {_id: 0, a: 1, b: 1, c: 1}}, {$match: {'a': 10, 'b': 20, 'c': 30}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
				index1: 
					collation spec: 
						ABT path: 
							PathGet [a]
							PathIdentity []

						collation op: Ascending
						ABT path: 
							PathGet [b]
							PathIdentity []

						collation op: Ascending
						ABT path: 
							PathGet [c]
							PathIdentity []

						collation op: Ascending
					version: 2
					ordering bits: 0
					is multi-key: 0
					distribution and paths: 
						distribution type: Centralized
						distribution paths: 
					requirementsMap: 

			non multi-key index paths: 
				PathGet [a]
				PathIdentity []

				PathGet [b]
				PathIdentity []

				PathGet [c]
				PathIdentity []

			collection exists: 1
			CE type: -1
optimization phases: 
	ConstEvalPre
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase
	PathFuse

-- OUTPUT:
Root []
|   |   projections: 
|   |       combinedProjection_0
|   RefBlock: 
|       Variable [combinedProjection_0]
Evaluation []
|   BindBlock:
|       [combinedProjection_0]
|           EvalPath []
|           |   Const [{}]
|           PathComposeM []
|           |   PathField [c]
|           |   PathConstant []
|           |   Variable [fieldProj_2]
|           PathComposeM []
|           |   PathField [b]
|           |   PathConstant []
|           |   Variable [fieldProj_1]
|           PathField [a]
|           PathConstant []
|           Variable [fieldProj_0]
IndexScan [{'<indexKey> 0': fieldProj_0, '<indexKey> 1': fieldProj_1, '<indexKey> 2': fieldProj_2}, scanDefName: collection, indexDefName: index1, interval: {[Const [10], Const [10]], [Const [20], Const [20]], [Const [30], Const [30]]}]
    BindBlock:
        [fieldProj_0]
            Source []
        [fieldProj_1]
            Source []
        [fieldProj_2]
            Source []


==== VARIATION: optimized $match sort index ====
-- INPUTS:
pipeline: [{$match: {'a': 10}}, {$sort: {'a': 1}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
				index1: 
					collation spec: 
						ABT path: 
							PathGet [a]
							PathTraverse [1]
							PathIdentity []

						collation op: Ascending
					version: 2
					ordering bits: 0
					is multi-key: 1
					distribution and paths: 
						distribution type: Centralized
						distribution paths: 
					requirementsMap: 

			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase

-- OUTPUT:
Root []
|   |   projections: 
|   |       scan_0
|   RefBlock: 
|       Variable [scan_0]
Collation []
|   |   collation: 
|   |       sort_0: Ascending
|   RefBlock: 
|       Variable [sort_0]
BinaryJoin [joinType: Inner, {rid_0}]
|   |   Const [true]
|   LimitSkip []
|   |   limitSkip:
|   |       limit: 1
|   |       skip: 0
|   Seek [ridProjection: rid_0, {'<root>': scan_0, 'a': sort_0}, collection]
|   |   BindBlock:
|   |       [scan_0]
|   |           Source []
|   |       [sort_0]
|   |           Source []
|   RefBlock: 
|       Variable [rid_0]
IndexScan [{'<rid>': rid_0}, scanDefName: collection, indexDefName: index1, interval: {[Const [10], Const [10]]}]
    BindBlock:
        [rid_0]
            Source []


==== VARIATION: optimized range index ====
-- INPUTS:
pipeline: [{$match: {'a': {$gt: 70, $lt: 90}}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
				index1: 
					collation spec: 
						ABT path: 
							PathGet [a]
							PathTraverse [1]
							PathIdentity []

						collation op: Ascending
					version: 2
					ordering bits: 0
					is multi-key: 1
					distribution and paths: 
						distribution type: Centralized
						distribution paths: 
					requirementsMap: 

			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase

-- OUTPUT:
Root []
|   |   projections: 
|   |       scan_0
|   RefBlock: 
|       Variable [scan_0]
BinaryJoin [joinType: Inner, {rid_0}]
|   |   Const [true]
|   LimitSkip []
|   |   limitSkip:
|   |       limit: 1
|   |       skip: 0
|   Seek [ridProjection: rid_0, {'<root>': scan_0}, collection]
|   |   BindBlock:
|   |       [scan_0]
|   |           Source []
|   RefBlock: 
|       Variable [rid_0]
Filter []
|   EvalFilter []
|   |   FunctionCall [getArraySize]
|   |   Variable [sides_0]
|   PathCompare [Eq]
|   Const [2]
GroupBy []
|   |   groupings: 
|   |       RefBlock: 
|   |           Variable [rid_0]
|   aggregations: 
|       [sides_0]
|           FunctionCall [$addToSet]
|           Variable [sideId_0]
Union []
|   |   BindBlock:
|   |       [rid_0]
|   |           Source []
|   |       [sideId_0]
|   |           Source []
|   Evaluation []
|   |   BindBlock:
|   |       [sideId_0]
|   |           Const [1]
|   IndexScan [{'<rid>': rid_0}, scanDefName: collection, indexDefName: index1, interval: {(Const [70], Const [""])}]
|       BindBlock:
|           [rid_0]
|               Source []
Evaluation []
|   BindBlock:
|       [sideId_0]
|           Const [0]
IndexScan [{'<rid>': rid_0}, scanDefName: collection, indexDefName: index1, interval: {[Const [nan], Const [90])}]
    BindBlock:
        [rid_0]
            Source []


==== VARIATION: optimized index on two keys ====
-- INPUTS:
pipeline: [{$match: {'a': 2, 'b': 2}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
				index1: 
					collation spec: 
						ABT path: 
							PathGet [a]
							PathTraverse [1]
							PathIdentity []

						collation op: Ascending
						ABT path: 
							PathGet [b]
							PathTraverse [1]
							PathIdentity []

						collation op: Ascending
					version: 2
					ordering bits: 0
					is multi-key: 1
					distribution and paths: 
						distribution type: Centralized
						distribution paths: 
					requirementsMap: 

			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase

-- OUTPUT:
Root []
|   |   projections: 
|   |       scan_0
|   RefBlock: 
|       Variable [scan_0]
BinaryJoin [joinType: Inner, {rid_0}]
|   |   Const [true]
|   LimitSkip []
|   |   limitSkip:
|   |       limit: 1
|   |       skip: 0
|   Seek [ridProjection: rid_0, {'<root>': scan_0}, collection]
|   |   BindBlock:
|   |       [scan_0]
|   |           Source []
|   RefBlock: 
|       Variable [rid_0]
IndexScan [{'<rid>': rid_0}, scanDefName: collection, indexDefName: index1, interval: {[Const [2], Const [2]], [Const [2], Const [2]]}]
    BindBlock:
        [rid_0]
            Source []


==== VARIATION: optimized index on one key ====
-- INPUTS:
pipeline: [{$match: {'a': 2, 'b': 2}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
				index1: 
					collation spec: 
						ABT path: 
							PathGet [a]
							PathTraverse [1]
							PathIdentity []

						collation op: Ascending
					version: 2
					ordering bits: 0
					is multi-key: 1
					distribution and paths: 
						distribution type: Centralized
						distribution paths: 
					requirementsMap: 

			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	ConstEvalPost
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase

-- OUTPUT:
Root []
|   |   projections: 
|   |       scan_0
|   RefBlock: 
|       Variable [scan_0]
BinaryJoin [joinType: Inner, {rid_0}]
|   |   Const [true]
|   Filter []
|   |   EvalFilter []
|   |   |   Variable [evalTemp_4]
|   |   PathTraverse [1]
|   |   PathCompare [Eq]
|   |   Const [2]
|   LimitSkip []
|   |   limitSkip:
|   |       limit: 1
|   |       skip: 0
|   Seek [ridProjection: rid_0, {'<root>': scan_0, 'b': evalTemp_4}, collection]
|   |   BindBlock:
|   |       [evalTemp_4]
|   |           Source []
|   |       [scan_0]
|   |           Source []
|   RefBlock: 
|       Variable [rid_0]
IndexScan [{'<rid>': rid_0}, scanDefName: collection, indexDefName: index1, interval: {[Const [2], Const [2]]}]
    BindBlock:
        [rid_0]
            Source []


==== VARIATION: optimized $group eval no inline: verify that "b" is not inlined in the group expression, but is coming from the physical scan ====
-- INPUTS:
pipeline: [{$group: {_id: null, a: {$first: '$b'}}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collection: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	ConstEvalPost
	ConstEvalPre
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase
	PathFuse
	PathLower

-- OUTPUT:
Root []
|   |   projections: 
|   |       agg_project_0
|   RefBlock: 
|       Variable [agg_project_0]
Evaluation []
|   BindBlock:
|       [agg_project_0]
|           Let [inputField_1]
|           |   If []
|           |   |   |   Variable [inputField_1]
|           |   |   FunctionCall [setField]
|           |   |   |   |   Variable [a_agg_0]
|           |   |   |   Const ["a"]
|           |   |   Variable [inputField_1]
|           |   BinaryOp [Or]
|           |   |   FunctionCall [isObject]
|           |   |   Variable [inputField_1]
|           |   FunctionCall [exists]
|           |   Variable [a_agg_0]
|           If []
|           |   |   Const [{}]
|           |   FunctionCall [setField]
|           |   |   |   Variable [groupByProj_0]
|           |   |   Const ["_id"]
|           |   Const [{}]
|           BinaryOp [Or]
|           |   FunctionCall [isObject]
|           |   Const [{}]
|           FunctionCall [exists]
|           Variable [groupByProj_0]
GroupBy []
|   |   groupings: 
|   |       RefBlock: 
|   |           Variable [groupByProj_0]
|   aggregations: 
|       [a_agg_0]
|           FunctionCall [$first]
|           Variable [groupByInputProj_0]
Evaluation []
|   BindBlock:
|       [groupByProj_0]
|           Const [null]
PhysicalScan [{'b': groupByInputProj_0}, collection]
    BindBlock:
        [groupByInputProj_0]
            Source []


==== VARIATION: optimized union ====
-- INPUTS:
pipeline: [{$unionWith: 'collB'}, {$match: {_id: 1}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		collA: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
			non multi-key index paths: 
			collection exists: 1
			CE type: -1
		collB: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase

-- OUTPUT:
Root []
|   |   projections: 
|   |       scan_0
|   RefBlock: 
|       Variable [scan_0]
Union []
|   |   BindBlock:
|   |       [scan_0]
|   |           Source []
|   Filter []
|   |   EvalFilter []
|   |   |   Variable [scan_0]
|   |   PathGet [_id]
|   |   PathTraverse [1]
|   |   PathCompare [Eq]
|   |   Const [1]
|   Evaluation []
|   |   BindBlock:
|   |       [scan_0]
|   |           EvalPath []
|   |           |   Variable [scan_1]
|   |           PathIdentity []
|   PhysicalScan [{'<root>': scan_1}, collB]
|       BindBlock:
|           [scan_1]
|               Source []
Filter []
|   EvalFilter []
|   |   Variable [evalTemp_0]
|   PathTraverse [1]
|   PathCompare [Eq]
|   Const [1]
PhysicalScan [{'<root>': scan_0, '_id': evalTemp_0}, collA]
    BindBlock:
        [evalTemp_0]
            Source []
        [scan_0]
            Source []


==== VARIATION: optimized common expression elimination ====
-- INPUTS:
pipeline: [{$project: {foo: {$add: ['$b', 1]}, bar: {$add: ['$b', 1]}}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		test: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	ConstEvalPre

-- OUTPUT:
Root []
|   |   projections: 
|   |       combinedProjection_0
|   RefBlock: 
|       Variable [combinedProjection_0]
Evaluation []
|   BindBlock:
|       [combinedProjection_0]
|           EvalPath []
|           |   Variable [scan_0]
|           PathComposeM []
|           |   PathDefault []
|           |   Const [{}]
|           PathComposeM []
|           |   PathField [foo]
|           |   PathConstant []
|           |   Variable [projGetPath_0]
|           PathComposeM []
|           |   PathField [bar]
|           |   PathConstant []
|           |   Variable [projGetPath_0]
|           PathKeep [_id, bar, foo]
Evaluation []
|   BindBlock:
|       [projGetPath_0]
|           BinaryOp [Add]
|           |   Const [1]
|           EvalPath []
|           |   Variable [scan_0]
|           PathGet [b]
|           PathIdentity []
Scan [test]
    BindBlock:
        [scan_0]
            Source []


==== VARIATION: optimized group by dependency: demonstrate that "c" is set to the array size (not the array itself coming from the group) ====
-- INPUTS:
pipeline: [{$group: {_id: {}, b: {$addToSet: '$a'}}}, {$project: {_id: 0, b: {$size: '$b'}}}, {$project: {_id: 0, c: '$b'}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		test: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	ConstEvalPre
	MemoExplorationPhase
	MemoImplementationPhase
	MemoSubstitutionPhase
	PathFuse

-- OUTPUT:
Root []
|   |   projections: 
|   |       combinedProjection_1
|   RefBlock: 
|       Variable [combinedProjection_1]
Evaluation []
|   BindBlock:
|       [combinedProjection_1]
|           EvalPath []
|           |   Const [{}]
|           PathComposeM []
|           |   PathField [c]
|           |   PathConstant []
|           |   FunctionCall [getArraySize]
|           |   Variable [b_agg_0]
|           PathKeep []
GroupBy []
|   |   groupings: 
|   |       RefBlock: 
|   |           Variable [groupByProj_0]
|   aggregations: 
|       [b_agg_0]
|           FunctionCall [$addToSet]
|           Variable [groupByInputProj_0]
Evaluation []
|   BindBlock:
|       [groupByProj_0]
|           Const [{}]
PhysicalScan [{'a': groupByInputProj_0}, test]
    BindBlock:
        [groupByInputProj_0]
            Source []


==== VARIATION: optimized double $elemMatch ====
-- INPUTS:
pipeline: [{$match: {a: {$elemMatch: {$gte: 5, $lte: 6}}, b: {$elemMatch: {$gte: 1, $lte: 3}}}}]
metadata: 
	number of partitions: 1
	scan definitions: 
		test: 
			options: 
			distribution and paths: 
				distribution type: Centralized
				distribution paths: 
			indexes: 
			non multi-key index paths: 
			collection exists: 1
			CE type: -1
optimization phases: 
	MemoSubstitutionPhase

-- OUTPUT:
Root []
|   |   projections: 
|   |       scan_0
|   RefBlock: 
|       Variable [scan_0]
Sargable [Complete]
|   |   |   |   |   requirementsMap: 
|   |   |   |   |       refProjection: scan_0, path: 'PathGet [a] PathIdentity []', intervals: {{{[Const [[]], Const [BinData(0, )])}}}
|   |   |   |   |       refProjection: scan_0, path: 'PathGet [a] PathTraverse [1] PathIdentity []', intervals: {{{[Const [5], Const [6]]}}}
|   |   |   |   |       refProjection: scan_0, path: 'PathGet [b] PathIdentity []', intervals: {{{[Const [[]], Const [BinData(0, )])}}}
|   |   |   |   |       refProjection: scan_0, path: 'PathGet [b] PathTraverse [1] PathIdentity []', intervals: {{{[Const [1], Const [3]]}}}
|   |   |   |   candidateIndexes: 
|   |   |   scanParams: 
|   |   |       {'a': evalTemp_7, 'b': evalTemp_8}
|   |   |           residualReqs: 
|   |   |               refProjection: evalTemp_7, path: 'PathIdentity []', intervals: {{{[Const [[]], Const [BinData(0, )])}}}, entryIndex: 0
|   |   |               refProjection: evalTemp_7, path: 'PathTraverse [1] PathIdentity []', intervals: {{{[Const [5], Const [6]]}}}, entryIndex: 1
|   |   |               refProjection: evalTemp_8, path: 'PathIdentity []', intervals: {{{[Const [[]], Const [BinData(0, )])}}}, entryIndex: 2
|   |   |               refProjection: evalTemp_8, path: 'PathTraverse [1] PathIdentity []', intervals: {{{[Const [1], Const [3]]}}}, entryIndex: 3
|   |   BindBlock:
|   RefBlock: 
|       Variable [scan_0]
Scan [test]
    BindBlock:
        [scan_0]
            Source []


