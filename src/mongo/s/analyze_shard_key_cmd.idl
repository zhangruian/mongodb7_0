# Copyright (C) 2022-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
  cpp_namespace: "mongo"

imports:
  - "mongo/db/basic_types.idl"
  - "mongo/db/keypattern.idl"

enums:
  MonotonicityType:
    description: "The monotonicity type of a shard key."
    type: string
    values:
      kMonotonic: "monotonic"
      kNotMonotonic: "not monotonic"
      kUnknown: "unknown"

structs:
  PercentileMetrics:
    description: "The percentile metrics for a set of non-negative integers."
    strict: false
    fields:
      p99:
        type: long
        validator: { gte: 0 }
      p95:
        type: long
        validator: { gte: 0 }
      p90:
        type: long
        validator: { gte: 0 }
      p80:
        type: long
        validator: { gte: 0 }
      p50:
        type: long
        validator: { gte: 0 }

  KeyCharacteristicsMetrics:
    description: "The metrics about the characteristics of a shard key."
    strict: false
    fields:
      numDocs:
        type: long
        description: "The number of the documents in the collection."
        validator: { gte: 0 }
        optional: true
      isUnique:
        type: bool
        description: "Whether the shard key index enforces a uniqueness constraint."
        optional: true
      cardinality:
        type: long
        description: "The number of distinct shard key values in the collection."
        validator: { gte: 0 }
        optional: true
      frequency:
        type: PercentileMetrics
        description: "The percentile metrics for the number of documents for each distinct shard key
                      value."
        optional: true
      monotonicity:
        type: MonotonicityType
        description: "The monotonicity of the shard key values in insertion order."
        optional: true
      numOrphanDocs:
        type: long
        description: "The number of the orphan documents in the collection."
        validator: { gte: 0 }
        optional: true

  ReadSampleSize:
    description: "The number of sampled read queries by command name."
    strict: false
    fields:
      total:
        type: long
        default: 0
      find:
        type: long
        default: 0
      aggregate:
        type: long
        default: 0
      count:
        type: long
        default: 0
      distinct:
        type: long
        default: 0

  WriteSampleSize:
    description: "The number of sampled write queries by command name."
    strict: false
    fields:
      total:
        type: long
        default: 0
      update:
        type: long
        default: 0
      delete:
        type: long
        default: 0
      findAndModify:
        type: long
        default: 0

  ReadDistributionMetrics:
    description: "The metrics about the read distribution calculated using sampled read queries."
    strict: true
    fields:
      sampleSize:
        type: ReadSampleSize
      numReadsTargetedOneShard:
        type: long
        cpp_name: numTargetedOneShard
        validator: { gte: 0 }
        optional: true
      percentageOfReadsTargetedOneShard:
        type: double
        cpp_name: percentageOfTargetedOneShard
        validator:
          gte: 0
          lte: 100
        optional: true
      numReadsTargetedMultipleShards:
        type: long
        cpp_name: numTargetedMultipleShards
        validator: { gte: 0 }
        optional: true
      percentageOfReadsTargetedMultipleShards:
        type: double
        cpp_name: percentageOfTargetedMultipleShards
        validator:
          gte: 0
          lte: 100
        optional: true
      numReadsTargetedAllShards:
        type: long
        cpp_name: numTargetedAllShards
        validator: { gte: 0 }
        optional: true
      percentageOfReadsTargetedAllShards:
        type: double
        cpp_name: percentageOfTargetedAllShards
        validator:
          gte: 0
          lte: 100
        optional: true
      numDispatchedReadsByRange:
        type: array<long>
        cpp_name: numDispatchedByRange
        description: "The number of dispatched read requests for each chunk range sorted from
                      MinKey to MaxKey."
        optional: true

  WriteDistributionMetrics:
    description: "The metrics about the write distribution calculated using sampled write queries."
    strict: true
    fields:
      sampleSize:
        type: WriteSampleSize
      numWritesTargetedOneShard:
        type: long
        cpp_name: numTargetedOneShard
        validator: { gte: 0 }
        optional: true
      percentageOfWritesTargetedOneShard:
        type: double
        cpp_name: percentageOfTargetedOneShard
        validator:
          gte: 0
          lte: 100
        optional: true
      numWritesTargetedMultipleShards:
        type: long
        cpp_name: numTargetedMultipleShards
        validator: { gte: 0 }
        optional: true
      percentageOfWritesTargetedMultipleShards:
        type: double
        cpp_name: percentageOfTargetedMultipleShards
        validator:
          gte: 0
          lte: 100
        optional: true
      numWritesTargetedAllShards:
        type: long
        cpp_name: numTargetedAllShards
        validator: { gte: 0 }
        optional: true
      percentageOfWritesTargetedAllShards:
        type: double
        cpp_name: percentageOfTargetedAllShards
        validator:
          gte: 0
          lte: 100
        optional: true
      numDispatchedWritesByRange:
        type: array<long>
        cpp_name: numDispatchedByRange
        description: "The number of dispatched write requests for each chunk range sorted from
                      MinKey to MaxKey."
        optional: true
      numShardKeyUpdates:
        type: long
        validator: { gte: 0 }
        optional: true
      percentageOfShardKeyUpdates:
        type: long
        validator:
          gte: 0
          lte: 100
        optional: true
      numSingleWritesWithoutShardKey:
        type: long
        validator: { gte: 0 }
        optional: true
      percentageOfSingleWritesWithoutShardKey:
        type: double
        validator:
          gte: 0
          lte: 100
        optional: true
      numMultiWritesWithoutShardKey:
        type: long
        validator: { gte: 0 }
        optional: true
      percentageOfMultiWritesWithoutShardKey:
        type: double
        validator:
          gte: 0
          lte: 100
        optional: true

  analyzeShardKeyResponse:
    description: "The response for the 'analyzeShardKey' command."
    strict: false
    inline_chained_structs: true
    chained_structs:
      KeyCharacteristicsMetrics: keyCharacteristics
    fields:
      readDistribution:
        type: ReadDistributionMetrics
        optional: true
      writeDistribution:
        type: WriteDistributionMetrics
        optional: true

commands:
  analyzeShardKey:
    description: "The command for calculating metrics for evaluating a shard key for a collection."
    command_name: analyzeShardKey
    strict: false
    namespace: type
    api_version: ""
    type: namespacestring
    fields:
      key:
        type: KeyPattern
        description: "The shard key to evaluate."
